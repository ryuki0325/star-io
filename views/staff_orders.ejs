<% title = "全ユーザー購入履歴" %>

<div class="container py-4 text-light">
  <h2 class="mb-4">🧾 全ユーザー購入履歴</h2>

  <!-- 🔍 検索・フィルター -->
  <div class="filter-bar mb-4 d-flex flex-wrap gap-2 align-items-center">
    <input type="text" id="searchInput" class="form-control bg-dark text-light border-info" placeholder="🔍 メール・ID・リンクを検索" style="max-width: 250px;">

    <select id="statusFilter" class="form-select bg-dark text-light border-info" style="max-width: 160px;">
      <option value="">全てのステータス</option>
      <option value="completed">完了</option>
      <option value="inprogress">進行中</option>
      <option value="pending">保留中</option>
      <option value="processing">処理中</option>
    </select>

    <select id="sortSelect" class="form-select bg-dark text-light border-info" style="max-width: 150px;">
      <option value="desc">📅 新しい順</option>
      <option value="asc">📅 古い順</option>
    </select>

    <!-- 📅 日付範囲 -->
    <input type="date" id="startDate" class="form-control bg-dark text-light border-info" style="max-width: 180px;">
    <input type="date" id="endDate" class="form-control bg-dark text-light border-info" style="max-width: 180px;">

    <button id="exportCSV" class="btn btn-outline-success">📤 CSV出力</button>
    <button id="resetFilters" class="btn btn-outline-info">リセット</button>
  </div>

  <% if (orders.length === 0) { %>
    <div class="alert alert-secondary">注文履歴はありません。</div>
  <% } else { %>
    <div id="orderList">
      <% orders.forEach(order => { %>
        <div class="order-card card bg-dark border border-info mb-3 p-3">
          <p class="mb-1">👤 ユーザー: <span class="user-email"><%= order.user_email %></span></p>
          <p class="mb-1">💎 サービス名: <span class="service-name"><%= order.service_name || "不明" %></span></p>
          <p class="mb-1 link-url">🔗 リンク: 
            <a href="<%= order.link %>" target="_blank"><%= order.link %></a>
          </p>
          <p class="mb-1 quantity">📦 数量: <%= order.quantity %></p>
          <p class="mb-1 price">💰 金額: <%= order.price %> 円</p>
          <p class="mb-1 date">📅 日時: 
            <%= new Date(order.created_at).toLocaleString("ja-JP", { timeZone: "Asia/Tokyo" }) %>
          </p>
          <p class="mb-0 status">
            📌 ステータス: 
           <%
            let jpStatus = "不明";
            const s = (order.status || "").toLowerCase();

            if (s === "completed") jpStatus = "完了";
            else if (s === "inprogress") jpStatus = "進行中";
            else if (s === "pending") jpStatus = "保留中";
            else if (s === "processing") jpStatus = "処理中";
            else if (s === "partial") jpStatus = "一部完了";
            else if (s === "canceled" || s === "cancel") jpStatus = "キャンセル";
            else if (s === "error" || s === "failed") jpStatus = "エラー";
          %>
            <span class="badge 
            <%= s === 'completed'
                ? 'bg-success'
                : s === 'inprogress'
                  ? 'bg-info text-dark'
                  : s === 'pending' || s === 'processing'
                    ? 'bg-warning text-dark'
                    : s === 'partial'
                      ? 'bg-primary'
                      : s === 'canceled' || s === 'error' || s === 'failed'
                        ? 'bg-danger'
                        : 'bg-secondary' %>">
            <%= jpStatus %>
          </span>
          </p>
        </div>
      <% }) %>
    </div>
  <% } %>
</div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const searchInput = document.getElementById("searchInput");
  const statusFilter = document.getElementById("statusFilter");
  const sortSelect = document.getElementById("sortSelect");
  const resetBtn = document.getElementById("resetFilters");
  const orderList = document.getElementById("orderList");
  const startDate = document.getElementById("startDate");
  const endDate = document.getElementById("endDate");
  const exportCSV = document.getElementById("exportCSV");

  function filterOrders() {
    const keyword = searchInput.value.toLowerCase();
    const status = statusFilter.value;
    const sort = sortSelect.value;
    const start = startDate.value ? new Date(startDate.value) : null;
    const end = endDate.value ? new Date(endDate.value) : null;

    const cards = Array.from(orderList.getElementsByClassName("order-card"));
    let visibleCards = [];

    cards.forEach(card => {
      const text = card.textContent.toLowerCase();
      const dateText = card.querySelector(".date").textContent.replace("📅 日時:", "").trim();
      const orderDate = new Date(dateText);

      const matchKeyword = keyword === "" || text.includes(keyword);
      const matchStatus = status === "" || text.includes(status);
      const matchStart = !start || orderDate >= start;
      const matchEnd = !end || orderDate <= end;

      if (matchKeyword && matchStatus && matchStart && matchEnd) {
        visibleCards.push(card);
        card.style.display = "block";
      } else {
        card.style.display = "none";
      }
    });

    // 並び替え
    visibleCards.sort((a, b) => {
      const dateA = new Date(a.querySelector(".date").textContent.replace("📅 日時:", "").trim());
      const dateB = new Date(b.querySelector(".date").textContent.replace("📅 日時:", "").trim());
      return sort === "desc" ? dateB - dateA : dateA - dateB;
    });

    orderList.innerHTML = "";
    visibleCards.forEach(c => orderList.appendChild(c));
  }

  // 🔄 入力イベントで即反映
  [searchInput, statusFilter, sortSelect, startDate, endDate].forEach(el => {
    el.addEventListener("input", filterOrders);
    el.addEventListener("change", filterOrders);
  });

  // 🧹 リセットボタン修正版
  resetBtn.addEventListener("click", () => {
    searchInput.value = "";
    statusFilter.value = "";
    sortSelect.value = "desc";
    startDate.value = "";
    endDate.value = "";

    // すべてのカードを再表示
    const cards = Array.from(orderList.getElementsByClassName("order-card"));
    cards.forEach(card => (card.style.display = "block"));

    // 並び順をリセット
    const sorted = cards.sort((a, b) => {
      const dateA = new Date(a.querySelector(".date").textContent.replace("📅 日時:", "").trim());
      const dateB = new Date(b.querySelector(".date").textContent.replace("📅 日時:", "").trim());
      return dateB - dateA;
    });

    orderList.innerHTML = "";
    sorted.forEach(c => orderList.appendChild(c));
  });

  // 📤 CSV出力機能
  exportCSV.addEventListener("click", () => {
    const rows = [["ユーザー", "サービス名", "リンク", "数量", "金額(円)", "日時", "ステータス"]];
    const cards = Array.from(orderList.getElementsByClassName("order-card")).filter(c => c.style.display !== "none");

    cards.forEach(card => {
      const data = [
        card.querySelector(".user-email")?.textContent.trim() || "",
        card.querySelector(".service-name")?.textContent.trim() || "",
        card.querySelector(".link-url a")?.href || "",
        card.querySelector(".quantity")?.textContent.replace("📦 数量:", "").trim() || "",
        card.querySelector(".price")?.textContent.replace("💰 金額:", "").trim() || "",
        card.querySelector(".date")?.textContent.replace("📅 日時:", "").trim() || "",
        card.querySelector(".status span")?.textContent.trim() || ""
      ];
      rows.push(data);
    });

    const csvContent = rows.map(e => e.join(",")).join("\n");
    const blob = new Blob(["\uFEFF" + csvContent], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `orders_${new Date().toLocaleDateString("ja-JP")}.csv`;
    link.click();
  });
});
</script>

<style>
/* ======== フィルターバー全体 ======== */
.filter-bar {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;
}

/* ======== 入力欄・セレクト共通 ======== */
.filter-bar input,
.filter-bar select {
  border: 2px solid #0dcaf0;
  color: #0dcaf0;
  background: #000814;
  font-weight: 500;
  padding: 8px 12px;
  border-radius: 6px;
  transition: all 0.25s ease;
  box-shadow: 0 0 8px rgba(13, 202, 240, 0.3);
}

.filter-bar input:focus,
.filter-bar select:focus {
  outline: none;
  background: #00182a;
  box-shadow: 0 0 12px rgba(13, 202, 240, 0.8);
}

.filter-bar input::placeholder {
  color: #0dcaf0b3;
}

/* ======== ボタン共通 ======== */
.filter-bar button {
  border: 2px solid #0dcaf0;
  color: #0dcaf0;
  background: transparent;
  padding: 8px 18px;
  font-weight: 600;
  border-radius: 6px;
  transition: all 0.25s ease;
  box-shadow: 0 0 6px rgba(13, 202, 240, 0.3);
}

.filter-bar button:hover {
  background: #0dcaf0;
  color: #000;
  box-shadow: 0 0 12px rgba(13, 202, 240, 0.8);
}

/* ======== モバイル対応 ======== */
@media (max-width: 768px) {
  .filter-bar {
    flex-direction: column;
    align-items: stretch;
  }

  .filter-bar input,
  .filter-bar select,
  .filter-bar button {
    width: 100%;
  }
}

/* ======== 注文カード ======== */
.order-card {
  border: 1.5px solid #0dcaf0;
  border-radius: 10px;
  background: #000814;
  color: #ffffff;
  box-shadow: 0 0 10px rgba(13, 202, 240, 0.3);
}

/* ======== 色指定 ======== */
.user-email { color: #0dcaf0 !important; font-weight: bold; }  /* 青 */
.service-name { color: #FFD700 !important; font-weight: bold; } /* 黄 */
.link-url a { color: #ff4c4c !important; text-decoration: none; word-break: break-all; } /* 赤 */
.link-url a:hover { color: #ff7777 !important; text-decoration: underline; }

/* ======== その他白 ======== */
.quantity, .price, .date, .status { color: #ffffff !important; }

/* ======== ステータス強調 ======== */
.status span { font-weight: bold; box-shadow: 0 0 6px rgba(13, 202, 240, 0.4); }
</style>
