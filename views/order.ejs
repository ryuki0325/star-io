<% title = '新規注文' %>

<div class="container py-4 text-light">
  <h2 class="mb-4">🚀 新規注文</h2>

 <!-- 💳 残高表示部分 -->
<div class="balance-display">
  💳 残高: <span class="balance-amount"><%= balance.toFixed(2) %> 円</span>
</div>

<!-- ✅ 注文フォーム -->
<form action="/order" method="POST" class="bg-dark p-4 rounded border border-info-subtle shadow">
  
  <!-- ✅ エラーメッセージ -->
  <% if (typeof error !== "undefined" && error) { %>
    <div style="color: red; font-weight: bold; margin-bottom: 15px;">
      <%= error %>
    </div>
  <% } %>

  <!-- ==== クイック選択 ==== -->
  <div class="mb-3">
    <label class="form-label mb-2">クイック選択</label>
    <div class="d-flex flex-wrap gap-2">
      <% const emojiMap = {
           TikTok:"🎵", Instagram:"📸", YouTube:"▶️", Twitter:"✖️",
           Spotify:"🎧", Telegram:"✈️", Twitch:"🎮", Facebook:"👥", Reddit:"👽"
         };
         const quickApps = ["TikTok","Instagram","YouTube","Twitter","Spotify","Telegram","Twitch","Facebook","Reddit"];
      %>
      <% quickApps.forEach(q => { if (grouped[q]) { %>
        <button type="button"
                class="app-chip btn btn-outline-info"
                data-app="<%= q %>">
          <span class="me-1"><%= emojiMap[q] || "🧩" %></span><%= q %>
        </button>
      <% } }) %>
    </div>
  </div>

<!-- ================== 絞り込みUI ================== -->
<div class="filter-bar" style="margin-bottom: 10px;">
  <label>🔍 検索:</label>
  <input type="text" id="searchInput" placeholder="サービス名を検索" style="width: 180px; margin-right: 10px;">

  <label>並び替え:</label>
  <select id="sortSelect" style="margin-right: 10px;">
    <option value="default">おすすめ順</option>
    <option value="low">💰 安い順</option>
    <option value="high">💸 高い順</option>
  </select>

  <label>フィルター:</label>
  <select id="filterSelect" style="margin-right: 10px;">
    <option value="none">全て表示</option>
    <option value="instant">⚡ 即時開始</option>
    <option value="refill">🔁 Refill保証付き</option>
    <option value="non-drop">🕊️ Non Drop</option>
    <option value="popular">💎 人気・Premium</option>
  </select>

  <button id="resetFilters" style="background:#333;color:#fff;border:none;padding:4px 8px;cursor:pointer;">
    リセット
  </button>
</div>

    <!-- ==== アプリ選択 ==== -->
    <div class="mb-3">
      <label for="appSelect" class="form-label">アプリを選択</label>
      <div class="select-wrap border border-3 border-info rounded">
        <select class="form-select bg-dark text-light border-0" id="appSelect" onchange="updateTypes()">
          <option value="">選択してください</option>
          <% (appOrder || []).forEach(app => { %>
            <option value="<%= app %>" <%= selectedApp === app ? "selected" : "" %>>
              <%= (emojiMap[app] || "🧩") + " " + app %>
            </option>
          <% }) %>
        </select>
      </div>
    </div>

    <!-- ==== 種類選択 ==== -->
    <div class="mb-3">
      <label for="typeSelect" class="form-label">種類を選択</label>
      <div class="select-wrap border border-3 border-info rounded">
        <select class="form-select bg-dark text-light border-0" id="typeSelect" onchange="updateServices()">
          <option value="">先にアプリを選んでください</option>
        </select>
      </div>
    </div>

    <!-- ==== サービス選択 ==== -->
<div class="mb-3">
  <label for="serviceSelect" class="form-label">サービスを選択（最終価格順）</label>
  <div class="select-wrap border border-3 border-info rounded">
    <select class="form-select bg-dark text-light border-0" id="serviceSelect" name="serviceId" onchange="updatePrice()">
      <option value="">先に種類を選んでください</option>
    </select>
  </div>
  <div class="form-text text-secondary mt-1">「単価: xx円/1000」は最終価格です</div>
</div>

    <!-- ==== リンク ==== -->
    <div class="mb-3">
      <label for="link" class="form-label">リンク</label>
      <input type="text" class="form-control bg-dark text-light border border-2 border-info" id="link" name="link" required>
    </div>

    <!-- ==== 数量 ==== -->
    <div class="mb-3">
      <label for="quantity" class="form-label">数量</label>
      <input type="number" class="form-control bg-dark text-light border border-2 border-info" id="quantity" name="quantity" min="1" required oninput="updatePrice()">
    </div>

    <!-- ✅ 金額表示 -->
    <div class="card bg-black border border-3 border-info p-3 mb-3">
      <p id="priceDisplay" class="text-info fs-5 mb-0">金額: 0 円</p>
    </div>

    <button type="submit" class="btn btn-info w-100 fw-bold py-2">注文する</button>
  </form>
</div>

<!-- ✅ 残高用スタイル -->
<style>
  @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap');

 .balance-display {
  font-family: 'Orbitron', sans-serif;
  font-size: 1.4rem;
  text-align: center;
  color: #00eaff;
  background: #000814;  /* ✅ 黒系で統一 */
  padding: 15px;
  border: 2px solid #0dcaf0;
  border-radius: 10px;
  margin-bottom: 20px;
  width: 100%;          /* ✅ フォームやカードと同じ幅 */
  box-shadow: 0 0 10px rgba(13, 202, 240, 0.6);
  animation: glow 1.5s infinite alternate;
}

@keyframes glow {
  from { box-shadow: 0 0 10px rgba(13, 202, 240, 0.4); }
  to   { box-shadow: 0 0 20px rgba(13, 202, 240, 0.9); }
}

.balance-amount {
  font-weight: bold;
  font-size: 1.8rem;
  color: #39ff14;
  text-shadow: 0 0 8px #39ff14, 0 0 15px #39ff14;
}

  .select-wrap { overflow: hidden; }
  .select-wrap:focus-within { box-shadow: 0 0 0.6rem rgba(13, 202, 240, 0.5); }
  .app-chip{
    border-width: 2px !important;
    border-radius: 999px;
    padding: .45rem .9rem;
    font-weight: 600;
    backdrop-filter: blur(2px);
  }
  .app-chip.active,
  .app-chip:hover{
    background:#0dcaf0;
    color:#000;
  }
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const appSelect     = document.getElementById("appSelect");
  const serviceSelect = document.getElementById("serviceSelect"); // サービスのセレクト
  const sortSelect    = document.getElementById("sortSelect");    // 並び替え（default/low/high/az など）
  const filterSelect  = document.getElementById("filterSelect");  // フィルター（none/instant/refill/non-drop/exclusive など）
  const searchInput   = document.getElementById("searchInput");   // 検索バー
  const resetBtn      = document.getElementById("resetFilters");  // リセットボタン

  // ==== クイック選択（アプリボタン） ====
  document.querySelectorAll(".app-chip").forEach(btn => {
    btn.addEventListener("click", () => {
      const app = btn.getAttribute("data-app");
      if (appSelect) {
        appSelect.value = app;
        appSelect.dispatchEvent(new Event("change")); // 種類・サービスの再描画（updateTypes内など）
      }
      document.querySelectorAll(".app-chip").forEach(b => b.classList.remove("active"));
      btn.classList.add("active");
    });
  });

  // ==== 初期表示：現在のアプリにハイライト & 種類更新 ====
  if (appSelect && appSelect.value) {
    const activeBtn = document.querySelector(`.app-chip[data-app="${appSelect.value}"]`);
    if (activeBtn) {
      document.querySelectorAll(".app-chip").forEach(b => b.classList.remove("active"));
      activeBtn.classList.add("active");
    }
    if (typeof updateTypes === "function") updateTypes();
  }

  // ===== ▼ 並び替え・フィルター実装 =====
  let originalOptions = [];

  // <option> から価格データを確実に取得（data-price が無くてもテキストから抽出）
  function ensurePriceDataAttr(opt) {
    if (!opt) return;
    if (!opt.dataset.price || isNaN(parseFloat(opt.dataset.price))) {
      // 例: "（最終価格: 4.20円/1000）" / "price: 4.20"
      const m = opt.text.replace(/,/g, "").match(/(?:最終価格|price)\s*[:：]?\s*([0-9]+(?:\.[0-9]+)?)/i);
      opt.dataset.price = m ? m[1] : "99999999"; // 見つからない時は大きな値
    }
  }

  // serviceSelect の現在の option 群をキャプチャ
  function updateOriginalOptions() {
    if (!serviceSelect) return;
    originalOptions = Array.from(serviceSelect.querySelectorAll("option")).slice(1); // 先頭のプレースホルダは除外
    originalOptions.forEach(ensurePriceDataAttr);
  }

  // 検索/フィルター/並び替えを適用
  function applyFilters() {
    if (!serviceSelect) return;
    if (originalOptions.length === 0) updateOriginalOptions();

    let options = [...originalOptions];
    const keyword = (searchInput?.value || "").toLowerCase();
    const sort    = (sortSelect?.value || "default");
    const filter  = (filterSelect?.value || "none");

    // --- 検索 ---
    if (keyword) {
      options = options.filter(o => o.text.toLowerCase().includes(keyword));
    }

    // --- フィルター ---
    if (filter !== "none") {
      const rex = {
        "instant"   : /instant|0-1|start|fast|ultra/i,
        "refill"    : /refill|guarantee/i,
        "non-drop"  : /non.?drop/i,
        "exclusive" : /exclusive|premium|best/i
      }[filter];
      if (rex) options = options.filter(o => rex.test(o.text));
    }

    // --- 並び替え ---
    if (sort === "low") {
      options.sort((a,b) => (parseFloat(a.dataset.price)||1e12) - (parseFloat(b.dataset.price)||1e12));
    } else if (sort === "high") {
      options.sort((a,b) => (parseFloat(b.dataset.price)||0) - (parseFloat(a.dataset.price)||0));
    } else if (sort === "az") {
      options.sort((a,b) => a.text.localeCompare(b.text, "ja"));
    }
    // default は順序変更なし（おすすめ順などはサーバ側の並びを尊重）

    // --- セレクト再描画 ---
    const placeholder = serviceSelect.options[0]?.cloneNode(true) || new Option("サービスを選んでください", "");
    serviceSelect.innerHTML = "";
    serviceSelect.appendChild(placeholder);
    options.forEach(o => serviceSelect.appendChild(o));
  }

  // ✅ 重要：サービスの <option> が更新されたら自動で再キャプチャ
  // （updateTypesがいつDOMを書き換えても追随できる）
  if (serviceSelect) {
    const mo = new MutationObserver(() => {
      updateOriginalOptions();
      applyFilters();
    });
    mo.observe(serviceSelect, { childList: true });
  }

  // イベント
  sortSelect   && sortSelect.addEventListener("change", applyFilters);
  filterSelect && filterSelect.addEventListener("change", applyFilters);
  searchInput  && searchInput.addEventListener("input",  applyFilters);

  resetBtn && resetBtn.addEventListener("click", () => {
    sortSelect   && (sortSelect.value   = "default");
    filterSelect && (filterSelect.value = "none");
    searchInput  && (searchInput.value  = "");
    updateOriginalOptions();
    applyFilters();
  });

  // 初期化
  updateOriginalOptions();
  applyFilters();
});
</script>

<!-- ✅ 種類・サービス選択スクリプト -->
<script>
  // grouped はサーバーから渡されるデータ
  const grouped = <%- JSON.stringify(grouped) %>;

  // ==== アプリを選んだら種類を更新 ====
function updateTypes() {
  const app = document.getElementById("appSelect").value;
  const typeSelect = document.getElementById("typeSelect");
  typeSelect.innerHTML = "<option value=''>種類を選んでください</option>";

  if (!app || !grouped[app]) return;

  // 種類ごとの絵文字マップ
  const typeEmojiMap = {
    "再生数": "▶️",
    "いいね": "❤️",
    "フォロワー": "👥",
    "コメント": "💬",
    "シェア": "🔄",
    "その他": "✨"
  };

  Object.keys(grouped[app]).forEach(type => {
    const option = document.createElement("option");
    option.value = type;
    option.textContent = (typeEmojiMap[type] || "🧩") + " " + type;
    typeSelect.appendChild(option);
  });
}

// ==== 種類を選んだらサービスを更新 ====
function updateServices() {
  const app = document.getElementById("appSelect").value;
  const type = document.getElementById("typeSelect").value;
  const serviceSelect = document.getElementById("serviceSelect");
  serviceSelect.innerHTML = "<option value=''>サービスを選んでください</option>";

  // データが無い場合は終了
  if (!app || !type || !grouped[app][type]) return;

  grouped[app][type].forEach(service => {
    const option = document.createElement("option");

    // ✅ IDを value に入れる
    option.value = service.service;

    // ✅ dataset に finalRate をセット（updatePrice で使う）
    option.dataset.finalRate = service.finalRate;

    // ✅ 表示は「ID + 名前 + 最終価格」
    option.textContent = `[${service.service}] ${service.name} （最終価格: ${service.finalRate.toFixed(2)}円/1000）`;

    serviceSelect.appendChild(option);
  });
}

// ==== サービスを選んだら金額を更新 ====
function updatePrice() {
  const serviceSelect = document.getElementById("serviceSelect");
  const qty = parseInt(document.getElementById("quantity").value, 10) || 0;
  const priceDisplay = document.getElementById("priceDisplay");

  if (!serviceSelect.value) {
    priceDisplay.textContent = "金額: 0 円";
    return;
  }

  // ✅ 選択中の option から data-final-rate を取得
  const selectedOption = serviceSelect.options[serviceSelect.selectedIndex];
  const finalRate = parseFloat(selectedOption.dataset.finalRate || "0");

  // ✅ 金額計算
  const price = Math.round((finalRate / 1000) * qty * 100) / 100;

  // ✅ 表示更新
  priceDisplay.textContent = `金額: ${price} 円`;
}
</script>
    
