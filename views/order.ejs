<% title = '新規注文' %>

<div class="container py-4 text-light">
  <h2 class="mb-4">🚀 新規注文</h2>

 <!-- 💳 残高表示部分 -->
<div class="balance-display">
  💳 残高: <span class="balance-amount"><%= balance.toFixed(2) %> 円</span>
</div>

<!-- 注文フォーム開始 -->
<form action="/order" method="POST">
  <!-- クイック選択やサービス選択など -->
</form>

  <!-- ✅ エラーメッセージ -->
  <% if (typeof error !== "undefined" && error) { %>
    <div style="color: red; font-weight: bold; margin-bottom: 10px;">
      <%= error %>
    </div>
  <% } %>

  <!-- ✅ 注文フォーム -->
  <form action="/order" method="POST" class="bg-dark p-4 rounded border border-info-subtle shadow">
    
    <!-- ==== クイック選択 ==== -->
    <div class="mb-3">
      <label class="form-label mb-2">クイック選択</label>
      <div class="d-flex flex-wrap gap-2">
        <% const emojiMap = {
             TikTok:"🎵", Instagram:"📸", YouTube:"▶️", Twitter:"✖️",
             Spotify:"🎧", Telegram:"✈️", Twitch:"🎮", Facebook:"👥", Reddit:"👽"
           };
           const quickApps = ["TikTok","Instagram","YouTube","Twitter","Spotify","Telegram","Twitch","Facebook","Reddit"];
        %>
        <% quickApps.forEach(q => { if (grouped[q]) { %>
          <button type="button"
                  class="app-chip btn btn-outline-info"
                  data-app="<%= q %>">
            <span class="me-1"><%= emojiMap[q] || "🧩" %></span><%= q %>
          </button>
        <% } }) %>
      </div>
    </div>

    <!-- ==== アプリ選択 ==== -->
    <div class="mb-3">
      <label for="appSelect" class="form-label">アプリを選択</label>
      <div class="select-wrap border border-3 border-info rounded">
        <select class="form-select bg-dark text-light border-0" id="appSelect" onchange="updateTypes()">
          <option value="">選択してください</option>
          <% (appOrder || []).forEach(app => { %>
            <option value="<%= app %>" <%= selectedApp === app ? "selected" : "" %>>
              <%= (emojiMap[app] || "🧩") + " " + app %>
            </option>
          <% }) %>
        </select>
      </div>
    </div>

    <!-- ==== 種類選択 ==== -->
    <div class="mb-3">
      <label for="typeSelect" class="form-label">種類を選択</label>
      <div class="select-wrap border border-3 border-info rounded">
        <select class="form-select bg-dark text-light border-0" id="typeSelect" onchange="updateServices()">
          <option value="">先にアプリを選んでください</option>
        </select>
      </div>
    </div>

    <!-- ==== サービス選択 ==== -->
    <div class="mb-3">
      <label for="serviceSelect" class="form-label">サービスを選択（安い順）</label>
      <div class="select-wrap border border-3 border-info rounded">
        <select class="form-select bg-dark text-light border-0" id="serviceSelect" name="serviceId" onchange="updatePrice()">
          <option value="">先に種類を選んでください</option>
        </select>
      </div>
      <div class="form-text text-secondary mt-1">「単価: xx円/1000」は1000単位あたりの金額です</div>
    </div>

    <!-- ==== リンク ==== -->
    <div class="mb-3">
      <label for="link" class="form-label">リンク</label>
      <input type="text" class="form-control bg-dark text-light border border-2 border-info" id="link" name="link" required>
    </div>

    <!-- ==== 数量 ==== -->
    <div class="mb-3">
      <label for="quantity" class="form-label">数量</label>
      <input type="number" class="form-control bg-dark text-light border border-2 border-info" id="quantity" name="quantity" min="1" required oninput="updatePrice()">
    </div>

    <!-- ✅ 金額表示 -->
    <div class="card bg-black border border-3 border-info p-3 mb-3">
      <p id="priceDisplay" class="text-info fs-5 mb-0">金額: 0 円</p>
    </div>

    <button type="submit" class="btn btn-info w-100 fw-bold py-2">注文する</button>
  </form>
</div>

<!-- ✅ 残高用スタイル -->
<style>
  @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap');

 .balance-display {
  font-family: 'Orbitron', sans-serif;
  font-size: 1.6rem;
  text-align: center;
  color: #00eaff;
  background: linear-gradient(135deg, #0a0f2c, #001f3f);
  padding: 15px 30px;
  border: 2px solid #00eaff;
  border-radius: 12px;
  margin: 20px auto;      /* ✅ フォームと余白をとる */
  width: fit-content;     /* ✅ 横幅は内容に合わせる */
  display: inline-block;  /* ✅ 横幅を最小限に */
  z-index: 1;
  position: relative;     /* ✅ 他の要素を覆わないように */
  box-shadow: 0 0 20px rgba(0, 234, 255, 0.7);
  animation: glow 1.5s infinite alternate;
}

@keyframes glow {
  from { box-shadow: 0 0 10px rgba(0, 234, 255, 0.5); }
  to   { box-shadow: 0 0 25px rgba(0, 234, 255, 1); }
}

  .balance-amount {
    font-weight: bold;
    font-size: 2rem;
    color: #39ff14;
    text-shadow: 0 0 10px #39ff14, 0 0 20px #39ff14;
  }


  .select-wrap { overflow: hidden; }
  .select-wrap:focus-within { box-shadow: 0 0 0.6rem rgba(13, 202, 240, 0.5); }
  .app-chip{
    border-width: 2px !important;
    border-radius: 999px;
    padding: .45rem .9rem;
    font-weight: 600;
    backdrop-filter: blur(2px);
  }
  .app-chip.active,
  .app-chip:hover{
    background:#0dcaf0;
    color:#000;
  }
</style>
    
